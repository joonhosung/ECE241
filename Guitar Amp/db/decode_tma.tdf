--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2401w[1..0]	: WIRE;
	w_anode2410w[3..0]	: WIRE;
	w_anode2427w[3..0]	: WIRE;
	w_anode2437w[3..0]	: WIRE;
	w_anode2447w[3..0]	: WIRE;
	w_anode2457w[3..0]	: WIRE;
	w_anode2467w[3..0]	: WIRE;
	w_anode2477w[3..0]	: WIRE;
	w_anode2487w[3..0]	: WIRE;
	w_anode2499w[1..0]	: WIRE;
	w_anode2506w[3..0]	: WIRE;
	w_anode2517w[3..0]	: WIRE;
	w_anode2527w[3..0]	: WIRE;
	w_anode2537w[3..0]	: WIRE;
	w_anode2547w[3..0]	: WIRE;
	w_anode2557w[3..0]	: WIRE;
	w_anode2567w[3..0]	: WIRE;
	w_anode2577w[3..0]	: WIRE;
	w_data2399w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2577w[3..3], w_anode2567w[3..3], w_anode2557w[3..3], w_anode2547w[3..3], w_anode2537w[3..3], w_anode2527w[3..3], w_anode2517w[3..3], w_anode2506w[3..3]), ( w_anode2487w[3..3], w_anode2477w[3..3], w_anode2467w[3..3], w_anode2457w[3..3], w_anode2447w[3..3], w_anode2437w[3..3], w_anode2427w[3..3], w_anode2410w[3..3]));
	w_anode2401w[] = ( (w_anode2401w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2410w[] = ( (w_anode2410w[2..2] & (! w_data2399w[2..2])), (w_anode2410w[1..1] & (! w_data2399w[1..1])), (w_anode2410w[0..0] & (! w_data2399w[0..0])), w_anode2401w[1..1]);
	w_anode2427w[] = ( (w_anode2427w[2..2] & (! w_data2399w[2..2])), (w_anode2427w[1..1] & (! w_data2399w[1..1])), (w_anode2427w[0..0] & w_data2399w[0..0]), w_anode2401w[1..1]);
	w_anode2437w[] = ( (w_anode2437w[2..2] & (! w_data2399w[2..2])), (w_anode2437w[1..1] & w_data2399w[1..1]), (w_anode2437w[0..0] & (! w_data2399w[0..0])), w_anode2401w[1..1]);
	w_anode2447w[] = ( (w_anode2447w[2..2] & (! w_data2399w[2..2])), (w_anode2447w[1..1] & w_data2399w[1..1]), (w_anode2447w[0..0] & w_data2399w[0..0]), w_anode2401w[1..1]);
	w_anode2457w[] = ( (w_anode2457w[2..2] & w_data2399w[2..2]), (w_anode2457w[1..1] & (! w_data2399w[1..1])), (w_anode2457w[0..0] & (! w_data2399w[0..0])), w_anode2401w[1..1]);
	w_anode2467w[] = ( (w_anode2467w[2..2] & w_data2399w[2..2]), (w_anode2467w[1..1] & (! w_data2399w[1..1])), (w_anode2467w[0..0] & w_data2399w[0..0]), w_anode2401w[1..1]);
	w_anode2477w[] = ( (w_anode2477w[2..2] & w_data2399w[2..2]), (w_anode2477w[1..1] & w_data2399w[1..1]), (w_anode2477w[0..0] & (! w_data2399w[0..0])), w_anode2401w[1..1]);
	w_anode2487w[] = ( (w_anode2487w[2..2] & w_data2399w[2..2]), (w_anode2487w[1..1] & w_data2399w[1..1]), (w_anode2487w[0..0] & w_data2399w[0..0]), w_anode2401w[1..1]);
	w_anode2499w[] = ( (w_anode2499w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2506w[] = ( (w_anode2506w[2..2] & (! w_data2399w[2..2])), (w_anode2506w[1..1] & (! w_data2399w[1..1])), (w_anode2506w[0..0] & (! w_data2399w[0..0])), w_anode2499w[1..1]);
	w_anode2517w[] = ( (w_anode2517w[2..2] & (! w_data2399w[2..2])), (w_anode2517w[1..1] & (! w_data2399w[1..1])), (w_anode2517w[0..0] & w_data2399w[0..0]), w_anode2499w[1..1]);
	w_anode2527w[] = ( (w_anode2527w[2..2] & (! w_data2399w[2..2])), (w_anode2527w[1..1] & w_data2399w[1..1]), (w_anode2527w[0..0] & (! w_data2399w[0..0])), w_anode2499w[1..1]);
	w_anode2537w[] = ( (w_anode2537w[2..2] & (! w_data2399w[2..2])), (w_anode2537w[1..1] & w_data2399w[1..1]), (w_anode2537w[0..0] & w_data2399w[0..0]), w_anode2499w[1..1]);
	w_anode2547w[] = ( (w_anode2547w[2..2] & w_data2399w[2..2]), (w_anode2547w[1..1] & (! w_data2399w[1..1])), (w_anode2547w[0..0] & (! w_data2399w[0..0])), w_anode2499w[1..1]);
	w_anode2557w[] = ( (w_anode2557w[2..2] & w_data2399w[2..2]), (w_anode2557w[1..1] & (! w_data2399w[1..1])), (w_anode2557w[0..0] & w_data2399w[0..0]), w_anode2499w[1..1]);
	w_anode2567w[] = ( (w_anode2567w[2..2] & w_data2399w[2..2]), (w_anode2567w[1..1] & w_data2399w[1..1]), (w_anode2567w[0..0] & (! w_data2399w[0..0])), w_anode2499w[1..1]);
	w_anode2577w[] = ( (w_anode2577w[2..2] & w_data2399w[2..2]), (w_anode2577w[1..1] & w_data2399w[1..1]), (w_anode2577w[0..0] & w_data2399w[0..0]), w_anode2499w[1..1]);
	w_data2399w[2..0] = data_wire[2..0];
END;
--VALID FILE
